name: CI/CD con Docker Compose y ACR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del c칩digo
        uses: actions/checkout@v4

      - name: Depuraci칩n - CURL a ACR Login Server
        run: |
          echo "Intentando CURL a la API v2 del registro: https://${{ secrets.AZURE_CR_LOGIN_SERVER }}/v2/"
          curl -vvv --fail-with-body "https://${{ secrets.AZURE_CR_LOGIN_SERVER }}/v2/" || true
        env:
          # Para que no se muestre el secreto completo en el log, usamos env
          ACR_LOGIN_SERVER: ${{ secrets.AZURE_CR_LOGIN_SERVER }}

      - name: Login de ACR Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_CR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CR_USERNAME }}
          password: ${{ secrets.AZURE_CR_PASSWORD }}

      - name: Configurar Docker Compose
        run: |
          echo "configurando docker comose"
          docker compose version

      - name: Construir Im치genes Docker Compose
        run: |
          echo "construccion de imagenes"
          docker compose -f docker-compose-build.yml build --no-cache

      - name: Etiquetar y Subir Im치genes a ACR
        run: |
            DOCKER_CR_SERVER=${{ secrets.AZURE_CR_LOGIN_SERVER }}
        
          
            docker tag habitar_repo-config-server $DOCKER_CR_SERVER/proyecto_chapter-config-server:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-config-server:latest
        
            docker tag habitar_repo-eureka-server $DOCKER_CR_SERVER/proyecto_chapter-eureka-server:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-eureka-server:latest
        
            docker tag habitar_repo-autenticacion $DOCKER_CR_SERVER/proyecto_chapter-autenticacion-service:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-autenticacion-service:latest
        
            docker tag habitar_repo-proyectos $DOCKER_CR_SERVER/proyecto_chapter-proyectos:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-proyectos:latest
        
            docker tag habitar_repo-api-gateway $DOCKER_CR_SERVER/proyecto_chapter-api-gateway:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-api-gateway:latest
        
            docker tag habitar_repo-documentos $DOCKER_CR_SERVER/proyecto_chapter-documentos:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-documentos:latest
        
            docker tag habitar_repo-colaboradores $DOCKER_CR_SERVER/proyecto_chapter-colaboradores:latest
            docker push $DOCKER_CR_SERVER/proyecto_chapter-colaboradores:latest
        
            echo "finalizado etiquetado y las imagenes estan en ACR - BIEN!"
      - name: Limpiar contenedores y recursos (en el runner)
        if: always() # siempre limpiar el runner de github
        run: |
          echo "Limpiando contenedores en el runner de github actions"
           docker compose -f docker-compose-build.yml down || true  #'true' evita que el workflow falle si no hay contenedores que detener
          echo "Limpieza completada."
